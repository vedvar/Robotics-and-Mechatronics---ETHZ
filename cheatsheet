

//----------------------------------------------------------------------------------------------------------------------------------
//APPENDIX THEORY

//Variables 
Type      Declaration                  # of Bits Range
intN_t    N-bit, N ∈ {8,16,32,64}     [-2^(N-1), +2^(N-1)-1]
uintN_t   N-bit, N ∈ {8,16,32,64}     [0, 2^N-1]

1 Byte = 8 Bits

//Pointers
int* ptr;   //Initialise a pointer with name ptr.
ptr = &k;   //Save the adress of k in ptr.
*ptr = 7;   //Change the value of the variable where ptr points to to 7.
printf("%d\n",*ptr);  //Print the value of the variable where ptr points to.
struct tag *st_ptr = &my_struct;  //Pointer to a structure
(*st_ptr).age = 63;     //Acces a object in a structure
st_ptr->age = 63;   //The BETTER version of the above

//Structs

#include <stdio.h>
#include <string.h>

struct tag {
char lname[20]; /* last name */
char fname[20]; /* first name */
int age; /* age */
float rate; /* e.g. 12.75 per hour */
};

struct tag my_struct; /* declare the structure my_struct */

int main(void)
{ 
strcpy(my_struct.lname,"Jensen");  //assigns the value "Jensen" to the lname member variable of the my_struct struct.
strcpy(my_struct.fname,"Ted");
printf("\n%s ",my_struct.fname);
printf("%s\n",my_struct.lname);
return 0;
}


//----------------------------------------------------------------------------------------------------------------------------------







//LINUX

//In file (rechts)
cd name
//In file (links)
cd ..
//Alles auflisten
ls
//Alles aufräumen
clear
//Wo bin ich ? 
pwd
//Copy file
cp 
//Neues file erstellen
mkdir
//file löschen
rmdir
//execute a program
./programName
//Open something in SublimeText
subl fileName
//Alles compilen
make 
//Alles löschen ???
make clean

//Compile code-------------------------
(1) CTRL + Shift + T
(2) Are you in folder containing that code?
(3) irm@ubuntu:~/Desktop/irm/lab00 $ gcc hello_world.c
(4) irm@ubuntu:~/Desktop/irm/lab00 $ ./a.out
(5) Rename the a.out file: irm@ubuntu:~/Desktop/irm/lab00 $ gcc -o hello_world hello_world.c
//------------------------------------


//Neues Programm in SublimeText erstellen
irm@ubuntu:~/Desktop/irm/lab00 $ subl nameOfProgram.c


//----------------------------------------------------------------------------------------------------------------------------------







//----------------------------------------------------------------------------------------------------------------------------------

//C

//Grundstruktur
#include <stdio.h>
#include <stdint.h>
int main()
{
//CODE
return 0;
}

//scanf(function)
int num;
scanf("%d", &num);

//type casting (to type char)
(char*)&arg

//Cast the value 245 to a 8-bit unsigned integer.
  uint8_t arg = (uint8_t)245;



//MAKEFILES


//See Makefile-Document in lab00 in the other VIRTUAL MACHINE



//----------------------------------------------------------------------------------------------------------------------------------
//CONCEPTUAL ARCHITECTURE


-> The µP is the CPU of laptops, and the operating system runs on it.

-> The µP can operate commercial peripheral units such as mouses, keyboards, screens, and Ethernet units.

-> The µC acts as an interface to external circuits and the physical world, and does not have an operating system.

-> The absence of an operating system in the µC gives full control of the timing and extensive access to all the pins of the chip.

-> The µP and µC are two distinct entities with a communication channel in between.

-> When a mouse or keyboard is used, the activity is captured by the operating system running on the µP.

-> If a change of action is required on the hardware connected to the pins of the µC, this is communicated to the µC.

-> To control hardware using a µC, an application that can understand mouse and keyboard commands is needed.

-> The µP can understand the peripherals, and the µC can control the pins, so two programs are needed to communicate with each other



//----------------------------------------------------------------------------------------------------------------------------------







//ARDUINO 

// the setup routine runs once when you press reset:
void setup() {
  // initialize serial communication at 9600 bits per second:
  Serial.begin(9600);
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
  // make the pushbutton's pin an input:
  pinMode(pushButton, INPUT);

  //Automatically change a variable name every ccurrence of dirPin in the code will be replaced by A1 during compilation.
  //So, if you have a line of code like pinMode(dirPin, OUTPUT);, it will be equivalent to pinMode(A1, OUTPUT); after preprocessing
   #define dirPin A1
}

// the loop routine runs over and over again forever:
void loop() {
  
  /*SERIAL-Read ------------------------------*/
  
  Serial.readBytes(((char*)&incoming),1);  //Read, PARSE to char and save at adress of incoming
  Serial.println(sensorValue);

  if(Serial.available()){} //Returns the number of bytes available in the serial input buffer.
  delay(1);        // delay in between reads for stability
 

  /*ANALOG-Read ------------------------------*/
  // read the input on analog pin 0:
  int sensorValue = analogRead(A0);
  float voltage = sensorValue * (5.0 / 1023.0); 
  

  /*DIGITAL-Read ------------------------------*/
  int buttonState = digitalRead(pushButton);
  digitalWrite(LED_BUILTIN, HIGH);

  //for loops
  int j = 0;
  for (j =0;j<8;j++){ }

  //Arrays
  int myArray[5] = {1, 2, 3, 4, 5};  //Initialize

  //Convert from decimal to binary
   int dlArray[4];  //Initialize
    
    for(int i = 0; i < 4; i++){
    dlArray[i] = (dl >> i) & 1;  //Shift dl by i elements (11011 shiftet by 2 is: 110), then AND-Operated by 1 (in binary: 0001); So only the least significant bit is evaluated.
    } 

}




//LABS

//----------------------------------------------------------------------------------------------------------------------------------
//lab02

//-> The analog-to-digital
  converter (ADC) on the Featherboard has a maximum resolution of 12-bits. The voltage measured is then assigned
  to a value between 0 and 4095 (= 212 - 1)
  
  12 BITS:
  -> V = 3.3*(digital reading)/4095 when the voltage range is 0 to 3.3V.
  
  16 BITS:
  -> V = 10.0*(digital reading)/32767 when the voltage range is +/- 10V.
  -> V = 5.0*(digital reading)/32767 when the voltage range is +/- 5V.

//-> Know how to save your variables
  int16_t hex1 = 0xD8F0;  //outputs -10000
  int32_t hex2 = 0xD8F0;  //outputs 55536

  -> In the above case,
    0xD8F0 had a "1" at the MSB, and is therefore a negative number. However, int32_t is a 32-bit integer where
    the leftmost bit is the sign bit. Thus, an int32_t variable stores 0xD8F0 as 0x0000D8F0.

//->Resolution:
The voltage resolution of the ADC is dependent on both the input voltage range and the bit size. For the ADC on
the Featherboard,
Voltage range = 0 to 3.3 -> Resolution = (3.3 - 0)/4095 = 0.806 mV.


//Communication between Featherboard and Computer

->Always via Serialport:
  int fd = serialport_init( "/dev/ttyUSB0", 115200);
  serialport_write(fd, "x");   

  int w = serialport_read(fd, charBuffer, 4, 1000); 
  value = atoi(charBuffer);  

//----------------------------------------------------------------------------------------------------------------------------------
//lab03

//----------------------------------------------------------------------------------------------------------------------------------
//lab04
